devtools::check(paste0(path_to_packages,
"MyFirstPackage"))
devtools::check(paste0(path_to_packages,
"MyFirstPackage"))
devtools::build(paste0(path_to_packages,
"MyFirstPackage"))
devtools::check(paste0(path_to_packages,
"MyFirstPackage"))
devtools::check(paste0(path_to_packages,
"MyFirstPackage"))
devtools::check(paste0(path_to_packages,
"MyFirstPackage"))
########################Data processing for page 3 ##########################
user_behavior_data <- read_csv('data/user_behavior.csv')
library(shiny)
library(dplyr)
#install.packages('shinydashboard')
library(shinydashboard)
library(gridExtra)
library(grid)
library(ggplot2)
library(flexdashboard)
library(shiny)
#install.packages("devtools")
#devtools::install_github("dreamRs/shinyWidgets")
library(shinyWidgets)
library(shinyjs)
library(tidyverse)
library(tidyquant)
library(plotly)
library(parsnip)
library(timetk)
library(xgboost)
library(ggthemes)
#install.packages('highcharter')
library(highcharter)
library(fmsb)
# install.packages("Rcpp")
library(Rcpp)
useShinyjs(rmd = TRUE)
setwd('C:\\Users\\yangxinchen\\Desktop\\yxcgit\\visualization_platform')
#setwd('C:\\Users\\yangxinchen\\Desktop\\yxcgit\\visualization_platform')
#getwd()
# Load functions
source("function/TS_function.R")
#setwd('C:\\Users\\yangxinchen\\Desktop\\yxcgit\\visualization_platform')
setwd('D:/R-programing/visualization_platform')
source("function/TS_function.R")
source('function/xgboost_forcast_coustomer.R')
########################Data processing for page 3 ##########################
user_behavior_data <- read_csv('data/user_behavior.csv')
########################Data processing for page 4 ##########################
order_data <- read_csv('data/orders.csv')
########################Data processing for page 5 and page 6 ##########################
# Load data
sales_data_raw <- read_csv('data/orders02.csv')
processed_data_tbl <- sales_data_raw %>%
select(ORDERDATE, ORDERNUMBER, ORDERLINENUMBER, COUNTRY, SALES, PRODUCTLINE, DEALSIZE, STATUS, CUSTOMERNAME)
# Preprocessing
processed_data_tbl <- processed_data_tbl %>%
mutate(ORDERDATE = mdy_hm(ORDERDATE),
ORDERDATE = as_datetime(ORDERDATE))
# Manual edits
processed_data_tbl$COUNTRY[processed_data_tbl$COUNTRY=="UK"] <- "United Kingdom"
processed_data_tbl$COUNTRY[processed_data_tbl$COUNTRY=="USA"] <- "United States"
processed_data_tbl
View(processed_data_tbl)
str(processed_data_tbl)
aggregate_time_series <-
function(data, time_unit = "month") {
output_tbl <- data %>%
mutate(date = floor_date(ORDERDATE, unit = time_unit)) %>%
group_by(date) %>%
summarize(total_sales = sum(SALES)) %>%
ungroup() %>%
mutate(label_text = str_glue("Date: {date}
Revenue: {scales::dollar(total_sales)}"))
return(output_tbl)
}
aggregate_time_series(processed_data_tbl)
str(a)
a=aggregate_time_series(processed_data_tbl)
str(a)
roxygenise(package.dir = paste0('D:/R-programing/own_package/package/',
"MyFirstPackage"))
devtools::check(paste0(path_to_packages,
"MyFirstPackage"))
# or
devtools::document(pkg = paste0(path_to_packages,
"MyFirstPackage"))
devtools::check(paste0(path_to_packages,
"MyFirstPackage"))
# or
devtools::document(pkg = paste0(path_to_packages,
"MyFirstPackage"))
devtools::check(paste0(path_to_packages,
"MyFirstPackage"))
generate_forecast(a)
b=generate_forecast(a)
plot_forecast(b)
# or
devtools::document(pkg = paste0(path_to_packages,
"MyFirstPackage"))
devtools::check(paste0(path_to_packages,
"MyFirstPackage"))
# or
devtools::document(pkg = paste0(path_to_packages,
"MyFirstPackage"))
warinings()
devtools::check(paste0(path_to_packages,
"MyFirstPackage"))
# or
devtools::document(pkg = paste0(path_to_packages,
"MyFirstPackage"))
devtools::check(paste0(path_to_packages,
"MyFirstPackage"))
# or
devtools::document(pkg = paste0(path_to_packages,
"MyFirstPackage"))
# or
devtools::document(pkg = paste0(path_to_packages,
"MyFirstPackage"))
rm(list = c("aggregate_time_series", "generate_forecast", "plot_forecast", "plot_time_series"))
# or
devtools::document(pkg = paste0(path_to_packages,
"MyFirstPackage"))
# or
devtools::document(pkg = paste0(path_to_packages,
"MyFirstPackage"))
# or
devtools::document(pkg = paste0(path_to_packages,
"MyFirstPackage"))
devtools::check(paste0(path_to_packages,
"MyFirstPackage"))
# or
devtools::document(pkg = paste0(path_to_packages,
"MyFirstPackage"))
devtools::check(paste0(path_to_packages,
"MyFirstPackage"))
# or
devtools::document(pkg = paste0(path_to_packages,
"MyFirstPackage"))
devtools::check(paste0(path_to_packages,
"MyFirstPackage"))
# or
devtools::document(pkg = paste0(path_to_packages,
"MyFirstPackage"))
devtools::check(paste0(path_to_packages,
"MyFirstPackage"))
example_data <- tibble::tribble(
~ORDERDATE, ~SALES,
"2020-02-24", 2871,
"2020-05-07", 2766,
"2020-08-30", 3884,
)
example_data
aggregate_time_series(example_data)
example_data$ORDERDATE=as.POSIXct(example_data$ORDERDATE)
aggregate_time_series(example_data)
# or
devtools::document(pkg = paste0(path_to_packages,
"MyFirstPackage"))
# or
devtools::document(pkg = paste0(path_to_packages,
"MyFirstPackage"))
devtools::check(paste0(path_to_packages,
"MyFirstPackage"))
devtools::install(pkg = paste0(path_to_packages,
"MyFirstPackage"),
reload = TRUE)
library(MyFirstPackage)
aggregate_time_series(processed_data_tbl)
a=aggregate_time_series(processed_data_tbl)
plot_time_series(a)
# or
devtools::document(pkg = paste0(path_to_packages,
"MyFirstPackage"))
devtools::install(pkg = paste0(path_to_packages,
"MyFirstPackage"),
reload = TRUE)
library(MyFirstPackage)
a=aggregate_time_series(processed_data_tbl)
plot_time_series(a)
a
plot_time_series <-
function(data) {
g <- data %>%
ggplot(aes(label_text, total_sales)) +
geom_line(color = "#01579B") +
geom_point(aes(text = label_text), color = "#01579B", size = 0.1) +
geom_smooth(method = "loess", span = 0.2) +
theme_excel_new() +
scale_color_gdocs() +
expand_limits(y = 0) +
scale_y_continuous(labels = scales::dollar_format()) +
labs(x = "", y = "") +
theme(axis.text=element_text(size=10.5))
ggplotly(g)
}
plot_time_series(a)
plot_time_series <-
function(data) {
g <- data %>%
ggplot(aes(date, total_sales)) +
geom_line(color = "#01579B") +
geom_point( color = "#01579B", size = 0.1) +
geom_smooth(method = "loess", span = 0.2) +
theme_excel_new() +
scale_color_gdocs() +
expand_limits(y = 0) +
scale_y_continuous(labels = scales::dollar_format()) +
labs(x = "", y = "") +
theme(axis.text=element_text(size=10.5))
ggplotly(g)
}
plot_time_series(a)
a
print(a,29)
print(a,n=29)
aggregate_time_series <-
function(data, time_unit = "month") {
output_tbl <- data %>%
dplyr::mutate(date = floor_date(ORDERDATE, unit = time_unit)) %>%
group_by(date) %>%
summarize(total_sales = sum(SALES)) %>%
ungroup() %>%
dplyr::mutate(label_text = str_glue("Date: {date}
Revenue: {scales::dollar(total_sales)}"))
return(output_tbl)
}
#' aggregated_data <- aggregate_time_series(data, time_unit = "month")
#' A function that plots the time series data
#'
#' This function plots the time series data, showing the total sales over time.
#'
#' @param data A data frame containing the time series data.
#' @return A plot of the time series data.
#' @import ggplot2
#' @import ggthemes
#' @export
plot_time_series <-
function(data) {
g <- data %>%
ggplot(aes(date, total_sales)) +
geom_line(color = "#01579B") +
geom_point( color = "#01579B", size = 0.1) +
geom_smooth(method = "loess", span = 0.2) +
theme_excel_new() +
scale_color_gdocs() +
expand_limits(y = 0) +
scale_y_continuous(labels = scales::dollar_format()) +
labs(x = "", y = "") +
theme(axis.text=element_text(size=10.5))
ggplotly(g)
}
#' A function that generates forecasts for the time series data
#'
#' This function generates forecasts for the future time periods based on the given data.
#'
#' @param data A data frame containing the time series data.
#' @param n_future An integer specifying the number of future periods to forecast (default: 12 and min:1).
#' @param seed An optional seed for reproducibility (default: NULL).
#' @return A data frame with the actual and predicted values for the time series data.
#' @import dplyr
#' @import parsnip
#' @import tidyverse
#' @import stringr
#' @import scales
#' @import tibble
#' @import timetk
#' @export
generate_forecast=function(data, n_future = 12, seed = NULL) {
train_tbl <- data %>%
tk_augment_timeseries_signature()
future_data_tbl <- data %>%
tk_index() %>%
tk_make_future_timeseries(n_future = n_future, inspect_weekdays = TRUE, inspect_months = TRUE) %>%
tk_get_timeseries_signature()
# Isolate and pull scale
time_scale <-  data %>%
tk_index() %>%
tk_get_timeseries_summary() %>%
pull(scale)
# Linear Regression for "year", XGBoost for other time units
if (time_scale == "year") {
model <- linear_reg(mode = "regression") %>%
set_engine(engine = "lm") %>%
fit.model_spec(total_sales ~ ., data = train_tbl %>% select(total_sales, index.num))
} else {
seed <- seed
set.seed(seed)
model <- boost_tree(
mode = "regression",
mtry = 20,
trees = 500,
min_n = 3,
tree_depth = 8,
learn_rate = 0.01,
loss_reduction = 0.01) %>%
set_engine(engine = "xgboost") %>%
fit.model_spec(total_sales ~ ., data = train_tbl %>% select(-date, -label_text, -diff))
}
prediction_tbl <- predict(model, new_data = future_data_tbl) %>%
bind_cols(future_data_tbl) %>%
select(.pred, index) %>%
rename(total_sales = .pred,
date        = index) %>%
mutate(label_text = str_glue("Date: {date}
Revenue: {scales::dollar(total_sales)}")) %>%
add_column(key = "Prediction")
output_tbl <- data %>%
add_column(key = "Actual") %>%
bind_rows(prediction_tbl)
output_tbl
return(output_tbl)
}
#' A function that plots the forecasts for the time series data
#'
#' This function plots the actual and predicted values for the time series data.
#'
#' @param data A data frame containing the time series data and forecasts.
#' @return A plot of the actual and predicted values.
#' @import ggplot2
#' @import ggthemes
#' @export
plot_forecast <-
function(data) {
# Yearly - LM Smoother (Loess)
time_scale <- data %>%
tk_index() %>%
tk_get_timeseries_summary() %>%
pull(scale)
# If only one yearly prediction -> points
n_predictions <- data %>%
filter(key == "Prediction") %>%
nrow()
g <- data %>%
ggplot(aes(date, total_sales, color = key)) +
geom_line() +
# geom_point(aes(text = label_text), size = 0.01) +
# geom_smooth(method = "loess", span = 0.2) +
theme_excel_new() +
scale_color_gdocs() +
scale_y_continuous(labels = scales::dollar_format()) +
expand_limits(y=0) +
labs(x = "", y = "") +
theme(axis.text=element_text(size=10.5))
# Yearly - LM Smoother
if (time_scale == "year") {
g <- g + geom_smooth(method = "lm")
} else {
g <- g + geom_smooth(method = "loess", span = 0.2)
}
# Only 1 Prediction
if (n_predictions == 1) {
g <- g + geom_point(aes(text = date), size = 1)
} else {
g <- g + geom_point(aes(text = data), size = 0.01)
}
ggplotly(g)
}
plot_forecast(b)
plot_forecast <-
function(data) {
# Yearly - LM Smoother (Loess)
time_scale <- data %>%
tk_index() %>%
tk_get_timeseries_summary() %>%
pull(scale)
# If only one yearly prediction -> points
n_predictions <- data %>%
filter(key == "Prediction") %>%
nrow()
g <- data %>%
ggplot(aes(date, total_sales, color = key)) +
geom_line() +
# geom_point(aes(text = label_text), size = 0.01) +
# geom_smooth(method = "loess", span = 0.2) +
theme_excel_new() +
scale_color_gdocs() +
scale_y_continuous(labels = scales::dollar_format()) +
expand_limits(y=0) +
labs(x = "", y = "") +
theme(axis.text=element_text(size=10.5))
# Yearly - LM Smoother
if (time_scale == "year") {
g <- g + geom_smooth(method = "lm")
} else {
g <- g + geom_smooth(method = "loess", span = 0.2)
}
# Only 1 Prediction
if (n_predictions == 1) {
g <- g + geom_point(aes(text = date), size = 1)
} else {
g <- g + geom_point(aes(text = date), size = 0.01)
}
ggplotly(g)
}
plot_forecast(b)
roxygenise(package.dir = paste0(path_to_packages,
"MyFirstPackage"))
rm(list = c("aggregate_time_series", "generate_forecast",
"plot_forecast", "plot_time_series"))
roxygenise(package.dir = paste0(path_to_packages,
"MyFirstPackage"))
devtools::check(paste0(path_to_packages,
"MyFirstPackage"))
# or
devtools::document(pkg = paste0(path_to_packages,
"MyFirstPackage"))
# or
devtools::document(pkg = paste0(path_to_packages,
"MyFirstPackage"))
devtools::check(paste0(path_to_packages,
"MyFirstPackage"))
create_package(path = paste0(path_to_packages,
"MyFirstPackage"))
# or
devtools::document(pkg = paste0(path_to_packages,
"MyFirstPackage"))
devtools::install(pkg = paste0(path_to_packages,
"MyFirstPackage"),
reload = TRUE)
library(MyFirstPackage)
a=aggregate_time_series(processed_data_tbl)
plot_time_series(a)
b=generate_forecast(a)
b=generate_forecast(a,n_future = 12)
b
plot_forecast(b)
path_to_packages <- "D:/R-programing/visualization_platform/own_package/"
create_package(path = paste0(path_to_packages,
"PredictFutureOrder"))
# We create the package skeleton in the given path.
# The `create_package()` function is used for this
# from the `usethis` package
getwd()
path_to_packages <- "here::dr_here()"
create_package(path = paste0(path_to_packages,
"PredictFutureOrder"))
path_to_packages <- "here::dr_here('own_package/')"
create_package(path = paste0(path_to_packages,
"PredictFutureOrder"))
library(here)
dr_here()
path_to_packages <- "D:/R-programing/visualization_platform/"
create_package(path = paste0(path_to_packages,
"PredictFutureOrder"))
path_to_packages <- "D:/R-programing/visualization_platform/own_package"
create_package(path = paste0(path_to_packages,
"PredictFutureOrder"), overwrite = FALSE)
create_package(path = paste0(path_to_packages,
"PredictFutureOrder"))
path_to_packages <- "D:/R-programing/visualization_platform/own_package/"
create_package(path = paste0(path_to_packages,
"PredictFutureOrder"))
# or
devtools::document(pkg = paste0(path_to_packages,
"PredictFutureOrder"))
# or
devtools::document(pkg = paste0(path_to_packages,
"PredictFutureOrder"))
devtools::check(paste0(path_to_packages,
"MyFirstPackage"))
devtools::check(paste0(path_to_packages,
"PredictFutureOrder"))
runApp('visualizaiton_platform_version01.R')
########################Data processing for page 5 and page 6 ##########################
# Load data
sales_data_raw <- read_csv('data/orders02.csv',show_col_types = FALSE)
library(shiny)
library(dplyr)
#install.packages('shinydashboard')
library(shinydashboard)
library(gridExtra)
library(grid)
library(ggplot2)
library(flexdashboard)
library(shiny)
#install.packages("devtools")
#devtools::install_github("dreamRs/shinyWidgets")
library(shinyWidgets)
library(shinyjs)
library(tidyverse)
library(tidyquant)
library(plotly)
library(parsnip)
library(timetk)
library(xgboost)
library(ggthemes)
#install.packages('highcharter')
library(highcharter)
library(fmsb)
# install.packages("Rcpp")
library(Rcpp)
devtools::install(pkg = paste0("own_package/",
"PredictFutureOrder"),
reload = TRUE)
#setwd('C:\\Users\\yangxinchen\\Desktop\\yxcgit\\visualization_platform')
#setwd('D:/R-programing/visualization_platform')
#getwd()
# Load functions
source('function/xgboost_forcast_coustomer.R')
########################Data processing for page 5 and page 6 ##########################
# Load data
sales_data_raw <- read_csv('data/orders02.csv',show_col_types = FALSE)
# Select relevant data
processed_data_tbl <- sales_data_raw %>%
select(ORDERDATE, ORDERNUMBER, ORDERLINENUMBER, COUNTRY, SALES, PRODUCTLINE, DEALSIZE, STATUS, CUSTOMERNAME)
sales_data_raw
runApp('visualizaiton_platform_version01.R')
library(shiny); runApp('visualizaiton_platform_version01.R')
